/*
! tailwindcss v3.3.2 | MIT License | https://tailwindcss.com
*//*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
  box-sizing: border-box; /* 1 */
  border-width: 0; /* 2 */
  border-style: solid; /* 2 */
  border-color: #e5e7eb; /* 2 */
}

::before,
::after {
  --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
*/

html {
  line-height: 1.5; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
  -moz-tab-size: 4; /* 3 */
  -o-tab-size: 4;
     tab-size: 4; /* 3 */
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 4 */
  font-feature-settings: normal; /* 5 */
  font-variation-settings: normal; /* 6 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
  margin: 0; /* 1 */
  line-height: inherit; /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
  height: 0; /* 1 */
  color: inherit; /* 2 */
  border-top-width: 1px; /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
  color: inherit;
  text-decoration: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/*
1. Use the user's configured `mono` font family by default.
2. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/*
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
  text-indent: 0; /* 1 */
  border-color: inherit; /* 2 */
  border-collapse: collapse; /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  font-weight: inherit; /* 1 */
  line-height: inherit; /* 1 */
  color: inherit; /* 1 */
  margin: 0; /* 2 */
  padding: 0; /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
  text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
[type='button'],
[type='reset'],
[type='submit'] {
  -webkit-appearance: button; /* 1 */
  background-color: transparent; /* 2 */
  background-image: none; /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
  outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
  box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
  resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::-moz-placeholder, textarea::-moz-placeholder {
  opacity: 1; /* 1 */
  color: #9ca3af; /* 2 */
}

input::placeholder,
textarea::placeholder {
  opacity: 1; /* 1 */
  color: #9ca3af; /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role="button"] {
  cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/
:disabled {
  cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block; /* 1 */
  vertical-align: middle; /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
  max-width: 100%;
  height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */
[hidden] {
  display: none;
}
  @property --color-a {
    syntax: "<color>";
    inherits: true;
    initial-value: transparent;
  }
  @property --color-b {
    syntax: "<color>";
    inherits: true;
    initial-value: transparent;
  }
  @property --color-c {
    syntax: "<color>";
    inherits: true;
    initial-value: transparent;
  }

*, ::before, ::after {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
}

::backdrop {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
}
.range {
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    width: 100%;
    background: white;
    height: 2px;
  }
.range::-webkit-slider-thumb {
    -webkit-appearance: none;
            appearance: none;
    background: var(--color-b);
    border: 2px solid white;
    width: 36px;
    height: 36px;
    border-radius: 36px;
    cursor: pointer;
  }
.range::-moz-range-thumb {
    -moz-appearance: none;
         appearance: none;
    background: var(--color-b);
    border: 2px solid white;
    width: 36px;
    height: 36px;
    border-radius: 36px;
    cursor: pointer;
  }
.relative {
  position: relative;
}
.z-10 {
  z-index: 10;
}
.mx-auto {
  margin-left: auto;
  margin-right: auto;
}
.mb-12 {
  margin-bottom: 3rem;
}
.mb-4 {
  margin-bottom: 1rem;
}
.flex {
  display: flex;
}
.aspect-\[9\/16\] {
  aspect-ratio: 9/16;
}
.min-h-\[100dvh\] {
  min-height: 100dvh;
}
.w-\[360px\] {
  width: 360px;
}
.w-full {
  width: 100%;
}
.max-w-full {
  max-width: 100%;
}
.items-center {
  align-items: center;
}
.justify-center {
  justify-content: center;
}
.overflow-hidden {
  overflow: hidden;
}
.rounded-2xl {
  border-radius: 1rem;
}
.bg-gradient-to-br {
  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));
}
.from-\[--color-a\] {
  --tw-gradient-from: var(--color-a) var(--tw-gradient-from-position);
  --tw-gradient-to: rgb(255 255 255 / 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}
.via-\[--color-b\] {
  --tw-gradient-to: rgb(255 255 255 / 0)  var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--color-b) var(--tw-gradient-via-position), var(--tw-gradient-to);
}
.to-\[--color-c\] {
  --tw-gradient-to: var(--color-c) var(--tw-gradient-to-position);
}
.p-8 {
  padding: 2rem;
}
.text-center {
  text-align: center;
}
.text-2xl {
  font-size: 1.5rem;
  line-height: 2rem;
}
.text-5xl {
  font-size: 3rem;
  line-height: 1;
}
.font-medium {
  font-weight: 500;
}
.leading-tight {
  line-height: 1.25;
}
.text-white {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity));
}
.duration-500 {
  transition-duration: 500ms;
}
.ease-in {
  transition-timing-function: cubic-bezier(0.4, 0, 1, 1);
}
.\[transition-property\:_--color-a\2c _--color-b\2c _--color-c\] {
  transition-property: --color-a, --color-b, --color-c;
}

/**
 * In case you want to learn how to write this in plain CSS,
 * I left that exmaple in too. The only thing you need to find out
 * yourself, is which classname should be added to what element ;)
 */

/*
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

html,
body {
  margin: 0;
  --color-a: #ccc;
  --color-b: #afaf;
  --color-c: #33aa;
}

main {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  min-height: 100dvh;
}

.wrapper {
  width: 300px;
  margin: 0 auto;
  aspect-ratio: 9/16;
  border-radius: 12px;
  transition: 500ms ease-in;
  transition-property: --color-a, --color-b, --color-c;
  background: linear-gradient(45deg, var(--color-a), var(--color-b), var(--color-c));
  position: relative;
  overflow: hidden;
  color: white;

}

.wrapper::before {
  content: "";
  position: absolute;
  background: linear-gradient(45deg, var(--color-a), var(--color-b));
  filter: blur(50px) brightness(1.5);
  left: 20%;
  top: 10%;
  width: 70%;
  height: 50%;
  border-radius: 25px;
  animation: blob 8s infinite cubic-bezier(0.6, -0.28, 0.735, 0.045);
  transform-origin: 60%;
}

.wrapper::after {
  content: "";
  position: absolute;
  background: linear-gradient(45deg, var(--color-a), var(--color-b));
  filter: blur(50px) brightness(1.5);
  left: 40%;
  top: 30%;
  width: 70%;
  height: 80%;
  border-radius: 25px;
  animation: blob 10s infinite cubic-bezier(0.215, 0.61, 0.355, 1) reverse;
  transform-origin: 60%;
}

.content {
  position: relative;
  z-index: 2;
}

.title {
  line-height: 1.2;
  font-size: 42px;
}

.label {
  text-align: center;
  font-size: 32px;
}

input[type="range"] {
  appearance: none;
  width: 100%;
  background: white;
  height: 2px;
}

input[type="range"]::-webkit-slider-thumb {
  appearance: none;
  background: var(--color-b);
  border: 2px solid white;
  width: 36px;
  height: 36px;
  border-radius: 36px;
  cursor: pointer;
}

input[type="range"]::-moz-range-thumb {
  appearance: none;
  background: var(--color-b);
  border: 2px solid white;
  width: 36px;
  height: 36px;
  border-radius: 36px;
  cursor: pointer;
}

@keyframes blob {
  0% {
    translate: 0 0;
    rotate: 0deg;
  }
  30% {
    rotate: 40deg;
  }
  50% {
    transform: translate(300px, 390px) scale(1.1);
  }
  80% {
    rotate: 90%;
  }
}

@property --color-a {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}

@property --color-b {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}

@property --color-c {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
} */

.before\:absolute::before {
  content: var(--tw-content);
  position: absolute;
}

.before\:left-\[20\%\]::before {
  content: var(--tw-content);
  left: 20%;
}

.before\:top-\[10\%\]::before {
  content: var(--tw-content);
  top: 10%;
}

.before\:h-\[50\%\]::before {
  content: var(--tw-content);
  height: 50%;
}

.before\:w-\[70\%\]::before {
  content: var(--tw-content);
  width: 70%;
}

.before\:origin-\[60\%\]::before {
  content: var(--tw-content);
  transform-origin: 60%;
}

@keyframes blob {

  0% {
    content: var(--tw-content);
    translate: 0 0;
    rotate: 0deg;
  }

  30% {
    content: var(--tw-content);
    rotate: 40deg;
  }

  50% {
    content: var(--tw-content);
    transform: translate(300px, 390px) scale(1.1);
  }

  80% {
    content: var(--tw-content);
    rotate: 90%;
  }
}

.before\:animate-blob::before {
  content: var(--tw-content);
  animation: blob 8s infinite cubic-bezier(0.6, -0.28, 0.735, 0.045);
}

.before\:rounded-3xl::before {
  content: var(--tw-content);
  border-radius: 1.5rem;
}

.before\:bg-gradient-to-br::before {
  content: var(--tw-content);
  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));
}

.before\:from-\[--color-a\]::before {
  content: var(--tw-content);
  --tw-gradient-from: var(--color-a) var(--tw-gradient-from-position);
  --tw-gradient-to: rgb(255 255 255 / 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}

.before\:to-\[--color-b\]::before {
  content: var(--tw-content);
  --tw-gradient-to: var(--color-b) var(--tw-gradient-to-position);
}

.before\:blur-\[50px\]::before {
  content: var(--tw-content);
  --tw-blur: blur(50px);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.before\:brightness-125::before {
  content: var(--tw-content);
  --tw-brightness: brightness(1.25);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.after\:absolute::after {
  content: var(--tw-content);
  position: absolute;
}

.after\:left-\[40\%\]::after {
  content: var(--tw-content);
  left: 40%;
}

.after\:top-\[30\%\]::after {
  content: var(--tw-content);
  top: 30%;
}

.after\:h-\[80\%\]::after {
  content: var(--tw-content);
  height: 80%;
}

.after\:w-\[70\%\]::after {
  content: var(--tw-content);
  width: 70%;
}

.after\:origin-\[60\%\]::after {
  content: var(--tw-content);
  transform-origin: 60%;
}

@keyframes blob {

  0% {
    content: var(--tw-content);
    translate: 0 0;
    rotate: 0deg;
  }

  30% {
    content: var(--tw-content);
    rotate: 40deg;
  }

  50% {
    content: var(--tw-content);
    transform: translate(300px, 390px) scale(1.1);
  }

  80% {
    content: var(--tw-content);
    rotate: 90%;
  }
}

.after\:animate-blob-reverse::after {
  content: var(--tw-content);
  animation: blob 10s infinite cubic-bezier(0.215, 0.61, 0.355, 1) reverse;
}

.after\:rounded-3xl::after {
  content: var(--tw-content);
  border-radius: 1.5rem;
}

.after\:bg-gradient-to-br::after {
  content: var(--tw-content);
  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));
}

.after\:from-\[--color-a\]::after {
  content: var(--tw-content);
  --tw-gradient-from: var(--color-a) var(--tw-gradient-from-position);
  --tw-gradient-to: rgb(255 255 255 / 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}

.after\:to-\[--color-b\]::after {
  content: var(--tw-content);
  --tw-gradient-to: var(--color-b) var(--tw-gradient-to-position);
}

.after\:blur-\[50px\]::after {
  content: var(--tw-content);
  --tw-blur: blur(50px);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.after\:brightness-125::after {
  content: var(--tw-content);
  --tw-brightness: brightness(1.25);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}
